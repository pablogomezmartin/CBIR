
#imports
import streamlit as st
from PIL import Image
from io import BytesIO
import pandas as pd
import numpy as np
from torchvision import models
import matplotlib.pyplot as plt

from retrieval_functions import return_n_nearest_CNN, return_n_nearest_SIFT, return_n_nearest_ORB, return_n_nearest_hist, return_n_nearest_bow
from visualization_functions import interface_view_results

# Para que no salgan los warnings
st.set_option('deprecation.showPyplotGlobalUse', False)

# Texto de la pesta침a y titulo de la p치gina
st.set_page_config(layout="wide", page_title="CBIR Interface")
st.title('WELCOME TO OUR CBIR INTERFACE!游닞')

# Desplegable 1
with st.expander('What is this app about?'):
    st.write('''En el mundo digital actual, la explosi칩n de datos visuales y el crecimiento
exponencial de im치genes han planteado desaf칤os significativos en t칠rminos de
organizaci칩n y recuperaci칩n de informaci칩n visual. En este contexto, el concepto
de Recuperaci칩n de Im치genes Basado en el Contenido (CBIR, por sus siglas en
ingl칠s) ha emergido como una poderosa t칠cnica para abordar estos desaf칤os de
manera eficiente y efectiva.
CBIR es un enfoque revolucionario que busca transformar la forma en que
interactuamos con im치genes digitales. A diferencia de los sistemas tradicionales
de recuperaci칩n de im치genes que dependen de etiquetas o metadatos asociados
a las im치genes, CBIR se basa en el contenido visual de las mismas. Este enfoque
permite a los usuarios buscar im치genes similares a una consulta en funci칩n de
sus caracter칤sticas visuales, como colores, texturas, formas y patrones.
En esencia, CBIR permite que las im치genes hablen por s칤 mismas, permitiendo a los usuarios explorar vastas colecciones de im치genes sin depender de
etiquetas o descripciones previas. Imagina poder buscar una imagen de un paisaje espec칤fico simplemente proporcionando una imagen similar como consulta,
o encontrar una obra de arte 칰nica en una extensa galer칤a en l칤nea con solo
cargar una imagen de referencia.
En este proyecto, exploraremos el emocionante mundo de CBIR y nos embarcaremos en el desarrollo de un sistema funcional de Recuperaci칩n de Im치genes
Basado en el Contenido. Nuestro objetivo es aplicar los conceptos te칩ricos y las
t칠cnicas pr치cticas de procesamiento de im치genes y aprendizaje autom치tico para
construir un sistema que pueda aprender a identificar y recuperar im치genes similares en funci칩n de sus caracter칤sticas visuales, allanando as칤 el camino hacia
una experiencia de b칰squeda de im치genes m치s intuitiva y enriquecedora.
A lo largo de las pr칩ximas dos semanas, nuestros estudiantes se sumergir치n en la investigaci칩n, el dise침o y la implementaci칩n de un sistema CBIR,
enfrentando desaf칤os t칠cnicos apasionantes y adquiriendo habilidades valiosas
en el proceso. Al finalizar este proyecto, esperamos que los participantes no solo hayan ganado experiencia en el campo del procesamiento de im치genes y el
aprendizaje autom치tico, sino que tambi칠n hayan contribuido al avance de la
tecnolog칤a de recuperaci칩n de im치genes basada en el contenido''')

# Desplegable 2
with st.expander('Our Dataset'):
    st.write(''' Para el desarrollo de esta pr치ctica se ha utilizado un DataSet p칰blico que hemos obtenido de kaggle llamado [Caltech 256 Image Dataset](https://www.kaggle.com/datasets/jessicali9530/caltech256) creado por Griffin, G. Holub, AD. Perona, P.
            \nEn este conjunto de datos hay 30.607 im치genes, que abarcan 257 categor칤as de objetos. Las categor칤as de objetos son muy diversas, desde saltamontes hasta diapasones. Nosotros hemos realizado una selecci칩n del conjunto de datos original, reduci칠ndolo a 15 categor칤as espec칤ficas y limitando la cantidad de im치genes a 50 por cada una de ellas. De este modo, hemos obtenido un subconjunto que consta de 750 im치genes con las siguientes categor칤as
             ''')
    
    st.image('clases.png', 'Las 15 catergor칤as seleccionadas con ejemplos')


# Elegir el m칠todo a sacar
st.sidebar.write("## Upload and download :gear:")

selected_option = st.sidebar.selectbox("What method would you like to use to find the most similar images??", ["CNN", "SIFT", "ORB","Color histogram","Bag of Words"])

if selected_option == "CNN":
    st.sidebar.subheader("CNN Options")
    cnn_option = st.sidebar.radio("Choose distance", ["euclidean", "cosine"])

elif selected_option == "Color histogram":
    st.sidebar.text('Remind that for color histogram \nyou must use an image of the \ndataset')
    st.sidebar.subheader("Color Histogram Options")
    hist_option = st.sidebar.radio("Choose distance", ["euclidean", "cosine"])

elif selected_option == "Bag of Words":
    st.sidebar.subheader("BoW Options")
    bow_option = st.sidebar.radio("Choose distance", ["euclidean", "cosine"])



# Elegir cuantas fotos recuperar 
n_fotos = st.sidebar.slider('How much images do you want to retrieve?', 4, 10, step=2)

# Tama침o m치ximo de la foto que se va a insertar (5MB)
MAX_FILE_SIZE = 5 * 1024 * 1024  

# Download the fixed image
def convert_image(img):
    buf = BytesIO()
    img.save(buf, format="PNG")
    byte_im = buf.getvalue()
    return byte_im


my_upload = st.sidebar.file_uploader("Upload an image", type=["png", "jpg", "jpeg"])


if my_upload is not None:
    if my_upload.size > MAX_FILE_SIZE:
        st.error("The uploaded file is too large. Please upload an image smaller than 5MB.")
    
    else:
        image = Image.open(my_upload)
        st.header("Query Image", divider='grey')
        st.image(image, use_column_width='auto')

        my_upload = np.array(image)

        df_images = pd.read_pickle('Images_df.pkl', compression={'method': 'gzip', 'compresslevel': 3, 'mtime': 1})
        df_features = pd.read_pickle('Features_df.pkl', compression={'method': 'gzip', 'compresslevel': 3, 'mtime': 1})
        df = pd.concat([df_images, df_features], axis=1)

        # Descargamos el modelo preentrenado
        model = models.vgg16(weights='DEFAULT')
    
        if selected_option == "CNN":
            nearest = return_n_nearest_CNN(my_upload, df, model, norm=cnn_option , n=n_fotos)
            st.header(f'Retrieval Images with CNN and {cnn_option} distance', divider='grey')
            st.pyplot(interface_view_results(nearest, df, n=n_fotos))
        
        elif selected_option == "SIFT":
            nearest = return_n_nearest_SIFT(my_upload, df, n=n_fotos)
            st.header("Retrieval Images with SIFT", divider='grey')
            st.pyplot(interface_view_results(nearest, df, n=n_fotos))

        elif selected_option == "ORB":
            nearest = return_n_nearest_ORB(my_upload, df, n=n_fotos)
            st.header("Retrieval Images with ORB", divider='grey')
            st.pyplot(interface_view_results(nearest, df, n=n_fotos))
        
        elif selected_option == "Color histogram":
            nearest = return_n_nearest_hist(my_upload, df, norm=hist_option)
            st.header(f'Retrieval Images with color histogram and {hist_option} distance', divider='grey')
            st.pyplot(interface_view_results(nearest, df, n=n_fotos))

        elif selected_option == 'Bag of Words':
            nearest = return_n_nearest_bow(my_upload, df, norm=bow_option, n=n_fotos)
            st.header(f'Retrieval Images with BoW and {bow_option} distance', divider='grey')
            st.pyplot(interface_view_results(nearest, df, n=n_fotos))
